===================
The design
===================

I. Key Factors
There are several aspects to deal with when adding scripting support to
Screen:
1. The set of information to expose.
2. The command interface to provide.
3. The hook on interesting events in Screen.
4. The ability to do run asynchronously to Screen itself.

A. Query & control interface

Currently, screen provides a way to control a running session through the -X
command switch, which sends the specified command through the sever socket.
It's quite useful and can already do automation to some degree, (e.g. [1]).
However, the problem is that, there is no way to get enough feedback to make
decision in your script in such a scheme. The first job is to provide an
interface for scripts to query internal status of Screen. The second job is to
provide an interface to control Screen, with reasonable feedback.

B. Event hooking

When the internal status of Screen changed, we say that an event happened.
Events are also interesting to scripts, but are not covered by the query
interface. A hook / callback system is needed to notify scripts about
interested events. With the callback that triggers before an event, the script
should be able to stop the event from happening.

C. Asynchronous scripting

So far, with the described scripting support, we can write small functions
that provide enhanced functionality to a screen command, or write event
handler that handles interested events. But we are restricted to finish our
work quickly. The problem is that, Screen itself is a single threaded
application, utilizing asynchronous I/O to provide services to all windows
running inside. So you simply can not do time-consuming work in any of the
processing path, including the scripts.

Sometimes we may need to wait for something in a script, such as emulating
Expect in a Screen script [2]. The core of this use case is to wait for an
output pattern and react upon it. One possible way is to provide an event
callback for it. But it's not a pleasant way to do a series of interaction.
A natural solution is to make the script able to run asynchronously to Screen
itself.

[1] http://github.com/rblackwe/yapc--na-2007--making-an-ajax-gui-for-gnu-screen
[2] http://lists.gnu.org/archive/html/screen-users/2009-05/msg00006.html

II. The Screen interface

Screen needs to provide a user interface to source and run scripts.

script source [-async|-a] [-binding|-b <binding>] script.

  This command sources the specified script. This command can be used several
  times to source multiple scripts. Use the -async switch if the
  script is supposed to run asynchronously , e.g. it needs to wait for
  external events. Asynchronous scripts running mode needs to acquire a
  lock before playing on Screen itself. As a result, it pays more overhead
  than synch ones. Moreover, asynchronous scripts may be isolated from other
  scripts and may not share any information with them. In other words, normal
  scripts may share the same context. (Note: the isolation between scripts may
  be implementation dependent. Which is more desirable?)

script call func arg1 arg2 ...

  Call functions defined by scripts. If the same function are defined in 
  multiple scripting context, the last one applies. Call to normal script
  returns synchronously. And call to asynchronous one will return immediately.

Special invoke interface, such as those embedded in caption/hstatus format
string.

III. The scripting interface

There are several kinds of objects that may be interested to scripts.

A. Display

Stands for a user interface.

----------
Properties:
----------

tty:
 mode: read only.
 type: String.
 description: The tty that this attach runs on.

term:
 mode: read only. 
 type: String. 
 description: The TERM env of that tty.

fore:
 mode: read only. 
 type: Window. 
 description: The fore window.

other:
 mode: read only. 
 type: Window. 
 description: List of windows other than the fore.

width:
 mode: read only. 
 type: Int. 
 description: As the name suggests

height:
 mode: read only. 
 type: Int. 
 description:  As the name suggests

user:
 mode: read only. 
 type: User. 
 description: The owner of this display.

layout:
 mode: read only. 
 type: Layout. 
 description: Active layout on this display.


----------
Methods:
----------

get_canvases: Get a list of canvases on this display.

----------
Events:
----------

on_resize: Triggered after the geometry of the display is changed.

B. Window

Stands for the sub-terminal(PTY, telnet etc) that processes runs on.

----------
Properties:
----------

title:
 mode: read write
 type: String.
 description: The title of the window.

number:
 mode: read only
 type: int.
 description: The index in the window slots.

dir:
 mode: read only
 type: String.
 description: The initial directory of the first 
              application (typically the shell) in that window.

tty:
 mode: read only
 type: String
 description: the associated terminal device for that window.

pid:
 mode: read only
 type: int
 description: the pid of of the slave end of the pty.

group:
 mode: read only
 type: Window
 description: The window group we belongs to. (*This seems in-active?*)

bell:
 mode: read only
 type: int
 description: The bell status of the window.

----------
Methods:
----------

int get_monitor_status(bool activity);
 Returns the status of the specified monitor type. Either activity or silence.
 When the silence monitor is active, the threshold is returned.
 
void set_monitor_status(bool activity, int status);
 Set the status of activity/silence monitor. The number of status for the
 silence monitor is the seconds of threshold.
 
void stuff(string buf);
 put the string into the input buffer.

int waitfor(string pattern);
 Waiting for a specified output pattern. The pattern is limited to plain text. 
 NOTICE: This is an asynchronous method call and can only be called in
 asynchronous mode.

----------
Events
----------

on_activity
on_silence
before_winchange
on_winchange
before_resize
on_resize

C. User

--------
Property:
--------

name:
 mode: read only
 type: String.
 description: The login name.

uid:
 mode: read only
 type: int
 description: The index in the ACL bit fields.

esc:
metaesc:
 mode: read only
 type: int
 description: The escape character

umask:
 mode: read only
 type: String.
 description: The access for the window created by this user to other users.
              The result will be in a form of 'rwx'.

D. Screen

 This is a pseudo object standing for the whole screen object. All other
 objects can be obtained starting from this one.

--------
Methods:
--------
windows
displays
command
windowbyname

input
get input from user.


===================
The Implementation
===================

Bindings are in fact script interpretors. We can have several different
language bindings at the same time, with each registered at the compiling time
and loaded (initialized) dynamically at runtime. It's an bridge between
scripts and screen itself.

---------------
Binding related.
---------------

---------------
Binding independent
---------------
